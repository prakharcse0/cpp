Conceptual: What is the primary purpose of std::unique_ptr in modern C++? How does it relate to the RAII principle?
The primary purpose of std::unique_ptr in modern C++ is to provide exclusive ownership of a dynamically allocated object with automatic memory management. It is designed to be a lightweight, efficient, and safe alternative to raw pointers for managing resources that have a single, unambiguous owner.

Essentially, std::unique_ptr acts as a "smart pointer" that takes responsibility for the lifetime of the object it points to. When a std::unique_ptr object goes out of scope, the memory pointed to by the std::unique_ptr is automatically deallocated (via delete), preventing memory leaks.

How does it relate to the RAII principle?

std::unique_ptr is a prime example, and arguably one of the most important practical applications, of the RAII (Resource Acquisition Is Initialization) principle in modern C++. Here's how it embodies RAII:

Resource Acquisition in Constructor:

When you create a std::unique_ptr, its constructor typically takes a raw pointer to a dynamically allocated object:
C++

std::unique_ptr<int> myIntPtr(new int(42));
In this act, the std::unique_ptr "acquires" the resource (the dynamically allocated int). The new operation is the "acquisition" part. If new fails (e.g., due to out of memory), it throws an exception, and the std::unique_ptr is not successfully constructed, ensuring the resource is not left in an unmanaged state.
Resource Release in Destructor:

The crucial aspect of RAII with std::unique_ptr lies in its destructor. The std::unique_ptr's destructor is automatically called when the std::unique_ptr object itself goes out of scope (e.g., at the end of a function, or when an exception unwinds the stack).
Inside its destructor, std::unique_ptr calls delete on the raw pointer it holds. This ensures that the memory for the dynamically allocated object is automatically and deterministically deallocated, preventing memory leaks.
Benefits through RAII:

Automatic Memory Management: You no longer need to manually call delete. This eliminates a common source of bugs (forgetting to delete, or deleting twice).
Exception Safety: If an exception is thrown within a block of code, the stack unwinds. As std::unique_ptr objects go out of scope during unwinding, their destructors are guaranteed to be called. This means that the dynamically allocated memory they manage will be automatically released, even in the face of errors, preventing resource leaks and ensuring your program remains in a consistent state.
Clearer Code: By abstracting away the manual new and delete calls, the code becomes cleaner, more readable, and less prone to resource management errors.
