The Cost of return v; (for a local variable v)
C++

std::vector<int> create_vector() {
    std::vector<int> v = {1, 2, 3, 4, 5}; // (A) Vector 'v' is constructed
    return v;                           // (B) What happens here?
}

int main() {
    std::vector<int> my_vector = create_vector(); // (C) What happens here?
    // ...
}
Cost Analysis for return v; in Modern C++ (C++11 and later):

Step (A): std::vector<int> v = {1, 2, 3, 4, 5};

Cost: This involves memory allocation for the vector's internal buffer (e.g., 5 * sizeof(int) bytes) and then copying the integer literals into that buffer. This is a necessary initial cost for creating the data.
Step (B) and (C) together (The Return and Initialization in main):

The Ideal Scenario (and most common): ZERO COST
In modern C++ (C++11 onwards, and especially guaranteed in C++17 for this pattern), the compiler performs an optimization called Named Return Value Optimization (NRVO), which is a form of Copy Elision.
What NRVO/Copy Elision does: Instead of constructing v inside create_vector() and then creating a copy/move of it to return, the compiler is allowed (and in C++17, required for this pattern) to construct the std::vector object directly into the memory location that will hold my_vector in main.
Think of it like this: The compiler "knows" that v is just going to be returned. So, it tells create_vector to "build its v directly where my_vector is supposed to go."
Resulting Cost for (B) and (C): Absolutely zero additional memory allocations, zero element copies, zero move operations. The object is constructed once, directly in its final destination. This is the most optimal scenario.
The Cost of return std::move(v); (for a local variable v)
C++

std::vector<int> create_vector_moved() {
    std::vector<int> v = {1, 2, 3, 4, 5}; // (A') Vector 'v' is constructed
    return std::move(v);                 // (B') What happens here?
}

int main() {
    std::vector<int> my_vector_moved = create_vector_moved(); // (C') What happens here?
    // ...
}
Cost Analysis for return std::move(v); in Modern C++ (C++11 and later):

Step (A'): std::vector<int> v = {1, 2, 3, 4, 5};

Cost: Same as (A). Memory allocation for the internal buffer and copying of initial elements.
Step (B') and (C') together (The Return and Initialization in main):

The std::move effect: When you use std::move(v), you explicitly tell the compiler: "Treat v as an rvalue reference." This signals that v is a temporary object or an object whose resources can be safely stolen.
Disabling Copy Elision: By forcing v to be an rvalue, you effectively disable the compiler's ability to perform NRVO (Copy Elision). The compiler now must perform a move operation.
Move Constructor Call: The std::vector's move constructor will be invoked.
Cost of a std::vector move constructor:
It typically involves no new memory allocations.
It involves no copying of elements.
It performs a few pointer and size assignments (e.g., data_ = other.data_; size_ = other.size_; other.data_ = nullptr; other.size_ = 0;). These are very cheap, constant-time operations.
Resulting Cost for (B') and (C'): One move operation. This is significantly cheaper than a deep copy, but it's still more expensive than zero operations (which return v; provides).
Summary of Costs:

return v; (local variable): 0 extra operations (due to copy elision/NRVO).
return std::move(v); (local variable): 1 move operation.
Therefore, for returning local variables, return v; is generally the superior choice because it allows for the most aggressive optimization (copy elision).

What is Copy Elision?
Copy Elision is a compiler optimization technique where the compiler eliminates (elides) unnecessary copy or move operations. It's a fundamental optimization that has existed in C++ compilers for a long time, even before C++11 and move semantics.

The core idea is that if an object is being created and then immediately copied or moved to another location, the compiler can often construct the object directly at its final destination, thus avoiding the intermediate copy/move entirely.

There are two main forms of copy elision relevant to function returns:

Return Value Optimization (RVO):

This applies when a function returns an unnamed temporary object (an rvalue).
Example:
C++

std::string make_name() {
    return "Alice"; // "Alice" creates a temporary std::string
}
std::string s = make_name();
Here, the temporary std::string object created by "Alice" is returned. RVO allows this temporary std::string to be constructed directly into s, eliding any copy or move.
Named Return Value Optimization (NRVO):

This applies when a function returns a named local variable (an lvalue).
Example (the one we've been discussing):
C++

std::vector<int> create_vector() {
    std::vector<int> v = {1, 2, 3, 4, 5}; // 'v' is a named local variable
    return v;
}
std::vector<int> my_vector = create_vector();
Here, v is a named local variable. NRVO allows v to be constructed directly into my_vector, completely bypassing any copy or move.
Why is it so important?

Performance: It's the ultimate optimization for object passing â€“ zero overhead.
Correctness: It ensures that objects are constructed and managed optimally without you having to manually write move constructors or worry about explicit std::move calls in these common return scenarios.
Safety: By directly constructing in the final location, it avoids the temporary state of a moved-from object.
Guaranteed Copy Elision (C++17):

Prior to C++17, copy elision (both RVO and NRVO) was an optional optimization that compilers could perform. While most good compilers would perform it in common cases, it wasn't guaranteed by the standard.

C++17 changed this for certain scenarios, making copy elision mandatory (guaranteed) in specific contexts where temporaries are materialized directly into the storage of an object. The most common of these is when initializing an object with the result of a prvalue (pure rvalue) expression. This solidifies the efficiency benefits and means you can rely on zero-cost returns for local variables in many cases.

In summary: Copy elision (especially NRVO) is your friend. It's why return v; for a local variable is generally the best and most performant way to return objects by value in modern C++. Using std::move on a local variable in a return statement prevents this highly effective optimization and forces a move, which, while better than a copy, is still not as good as zero operations.






